# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

SELECT * FROM BIT_DB.Spotifydata LIMIT 10;

#How many songs does each artist have in the top 50?;
SELECT artist_name, Count('track_name') AS total_songs
FROM Spotifydata
GROUP BY artist_name
ORDER BY total_songs desc;

#Average song length?;
SELECT AVG((duration_ms/1000)/60) AS average_length
FROM BIT_DB.Spotifydata;

#Which artist has the longest song and what is it?;
SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
ORDER BY duration_ms desc
LIMIT 1;

#Which artist has the shortest song and what is it?;
SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
ORDER BY duration_ms asc
LIMIT 1;

#Top songs by popularity and danceability;
SELECT track_name, danceability, popularity
FROM BIT_DB.Spotifydata
WHERE popularity >89
AND danceability > .5;

#Most popular artists;
SELECT artist_name, AVG(popularity) AS popular
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING popular > 89.999;

#Does the energy affect danceability in a noticeable way?
SELECT energy, danceability
FROM BIT_DB.Spotifydata
ORDER BY energy desc;
