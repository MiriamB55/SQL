--- VIDEO_Q1 ---

/* Problem Statement:
- For pairs of brands in the same year (e.g. apple/samsung/2020 and samsung/apple/2020) 
    - if custom1 = custom3 and custom2 = custom4 : then keep only one pair

- For pairs of brands in the same year 
    - if custom1 != custom3 OR custom2 != custom4 : then keep both pairs

- For brands that do not have pairs in the same year : keep those rows as well
*/


DROP TABLE IF EXISTS brands;
CREATE TABLE brands 
(
    brand1      VARCHAR(20),
    brand2      VARCHAR(20),
    year        INT,
    custom1     INT,
    custom2     INT,
    custom3     INT,
    custom4     INT
);
INSERT INTO brands VALUES ('apple', 'samsung', 2020, 1, 2, 1, 2);
INSERT INTO brands VALUES ('samsung', 'apple', 2020, 1, 2, 1, 2);
INSERT INTO brands VALUES ('apple', 'samsung', 2021, 1, 2, 5, 3);
INSERT INTO brands VALUES ('samsung', 'apple', 2021, 5, 3, 1, 2);
INSERT INTO brands VALUES ('google', NULL, 2020, 5, 9, NULL, NULL);
INSERT INTO brands VALUES ('oneplus', 'nothing', 2020, 5, 9, 6, 3);

SELECT * FROM brands;


WITH cte AS
    (SELECT *,
CASE WHEN brand1 < brand2 THEN brand1 || brand2 || year
ELSE brand2 || brand1 || year END AS pairid
FROM brands),
 cte2 AS
    (SELECT *,
row_number () over (partition by pairid order by pairid) as rn
FROM cte)
SELECT brand1, brand2, year, custom1, custom2, custom3, custom4
FROM cte2
WHERE rn=1
OR (custom1 <> custom3 AND custom2 <> custom4);

--day 12 SQL query challenge
PROBLEM STATEMENT: 
Given graph shows the hierarchy of employees in a company. 
Write an SQL query to split the hierarchy and show the employees corresponding to their team.


CREATE TABLE company
(
	employee	varchar(10) primary key,
	manager		varchar(10)
);

INSERT INTO company values ('Elon', null);
INSERT INTO company values ('Ira', 'Elon');
INSERT INTO company values ('Bret', 'Elon');
INSERT INTO company values ('Earl', 'Elon');
INSERT INTO company values ('James', 'Ira');
INSERT INTO company values ('Drew', 'Ira');
INSERT INTO company values ('Mark', 'Bret');
INSERT INTO company values ('Phil', 'Mark');
INSERT INTO company values ('Jon', 'Mark');
INSERT INTO company values ('Omid', 'Earl');

Select * from company;

Select employee
FROM company overlord
WHERE manager is NULL;

Select 'Team '|| row_number() over(order by mng1.employee) as Team, mng1.employee
FROM company overlord
Join company mng1 ON overlord.employee = mng1.manager
WHERE overlord.manager is NULL;

with recursive cte as
    (
    select 
        comp.employee, 
        comp.manager, 
        t.team
    from company comp
    cross join cte_team t 
    where comp.manager is null
    union 
        select comp.employee, comp.manager,
        case when t.team is not null then t.team
	else case when comp.manager = cte.employee then cte.team end 
         end as team  
         from company comp
         join cte on cte.employee = comp.manager	
         left join cte_team t on t.employee = comp.employee
     ),
     cte_team as
     (SELECT 'Team ' || row_number() over(order by mang.employee) as team, mang.employee
         FROM company overlord
         join company mang on overlord.employee = mang.manager
         where overlord.manager is null)
select team, Group_concat(employee, ', ') as members
from cte 
group by team
order by team;

